{"version":3,"file":"static/js/732.cdafc84b.chunk.js","mappings":"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","sources":["pages/Statistics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHabits } from '../context/HabitContext';\r\n\r\nconst Statistics = () => {\r\n  const { habits } = useHabits();\r\n  const [monthlyData, setMonthlyData] = useState([]);\r\n  const [categoryData, setCategoryData] = useState([]);\r\n  const [selectedHabit, setSelectedHabit] = useState(null);\r\n  const [selectedMonth, setSelectedMonth] = useState(() => {\r\n    const today = new Date();\r\n    return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;\r\n  });\r\n  \r\n  // Generate month options for select\r\n  const getMonthOptions = () => {\r\n    const options = [];\r\n    const today = new Date();\r\n    const currentYear = today.getFullYear();\r\n    const currentMonth = today.getMonth();\r\n    \r\n    // Generate options for the last 12 months\r\n    for (let i = 0; i < 12; i++) {\r\n      let month = currentMonth - i;\r\n      let year = currentYear;\r\n      \r\n      if (month < 0) {\r\n        month += 12;\r\n        year -= 1;\r\n      }\r\n      \r\n      const value = `${year}-${String(month + 1).padStart(2, '0')}`;\r\n      const label = new Date(year, month, 1).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      \r\n      options.push({ value, label });\r\n    }\r\n    \r\n    return options;\r\n  };\r\n  \r\n  const monthOptions = getMonthOptions();\r\n  \r\n  useEffect(() => {\r\n    if (habits.length === 0) return;\r\n    \r\n    // Calculate monthly completion data\r\n    const [year, month] = selectedMonth.split('-').map(Number);\r\n    const daysInMonth = new Date(year, month, 0).getDate();\r\n    \r\n    // Generate daily data for the selected month\r\n    const dailyData = [];\r\n    \r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n      \r\n      // Filter habits that should be active on this date\r\n      const activeHabits = habits.filter(habit => {\r\n        const habitDate = new Date(date);\r\n        const dayOfWeek = habitDate.getDay();\r\n        const dayOfMonth = habitDate.getDate();\r\n        \r\n        switch (habit.frequency) {\r\n          case 'daily':\r\n            return true;\r\n          case 'weekly':\r\n            return dayOfWeek === (habit.weeklyDay || 1);\r\n          case 'monthly':\r\n            return dayOfMonth === (habit.monthlyDate || 1);\r\n          default:\r\n            return true;\r\n        }\r\n      });\r\n      \r\n      // Count completed habits for this date\r\n      const completedCount = activeHabits.filter(habit => \r\n        habit.history.some(entry => entry.date === date && entry.completed)\r\n      ).length;\r\n      \r\n      // Calculate completion percentage\r\n      const percentage = activeHabits.length > 0 \r\n        ? Math.round((completedCount / activeHabits.length) * 100) \r\n        : 0;\r\n      \r\n      dailyData.push({\r\n        date,\r\n        day,\r\n        activeHabits: activeHabits.length,\r\n        completed: completedCount,\r\n        percentage\r\n      });\r\n    }\r\n    \r\n    setMonthlyData(dailyData);\r\n    \r\n    // Calculate stats by category\r\n    const categories = {};\r\n    \r\n    habits.forEach(habit => {\r\n      const category = habit.category;\r\n      \r\n      if (!categories[category]) {\r\n        categories[category] = {\r\n          name: category,\r\n          count: 0,\r\n          completed: 0,\r\n          streakSum: 0\r\n        };\r\n      }\r\n      \r\n      categories[category].count++;\r\n      categories[category].streakSum += habit.streak;\r\n      \r\n      // Count completions in the selected month\r\n      habit.history.forEach(entry => {\r\n        if (entry.date.startsWith(selectedMonth) && entry.completed) {\r\n          categories[category].completed++;\r\n        }\r\n      });\r\n    });\r\n    \r\n    setCategoryData(Object.values(categories));\r\n    \r\n    // Set default selected habit\r\n    if (!selectedHabit && habits.length > 0) {\r\n      setSelectedHabit(habits[0].id);\r\n    }\r\n  }, [habits, selectedMonth, selectedHabit]);\r\n  \r\n  // Get selected habit data\r\n  const habitData = selectedHabit \r\n    ? habits.find(habit => habit.id === selectedHabit) \r\n    : null;\r\n  \r\n  return (\r\n    <div className=\"statistics-container animate-in\">\r\n      <h2 className=\"page-title\">Statistics & Analytics</h2>\r\n      \r\n      <div className=\"stats-controls glass-card\">\r\n        <div className=\"control-group\">\r\n          <label htmlFor=\"month-select\">Month</label>\r\n          <select \r\n            id=\"month-select\"\r\n            value={selectedMonth}\r\n            onChange={(e) => setSelectedMonth(e.target.value)}\r\n          >\r\n            {monthOptions.map(option => (\r\n              <option key={option.value} value={option.value}>\r\n                {option.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"control-group\">\r\n          <label htmlFor=\"habit-select\">Habit</label>\r\n          <select\r\n            id=\"habit-select\"\r\n            value={selectedHabit || ''}\r\n            onChange={(e) => setSelectedHabit(Number(e.target.value))}\r\n          >\r\n            {habits.map(habit => (\r\n              <option key={habit.id} value={habit.id}>\r\n                {habit.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"stats-grid\">\r\n        <div className=\"glass-card stat-card\">\r\n          <h3>Monthly Overview</h3>\r\n          <div className=\"calendar-heatmap\">\r\n            {monthlyData.map((day) => (\r\n              <div \r\n                key={day.date} \r\n                className=\"heatmap-day\"\r\n                style={{ \r\n                  backgroundColor: day.percentage > 0 \r\n                    ? `rgba(176, 224, 168, ${day.percentage / 100})` \r\n                    : 'transparent',\r\n                  border: '1px solid var(--glass-border)'\r\n                }}\r\n                title={`${day.date}: ${day.percentage}% completed`}\r\n              >\r\n                {day.day}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"glass-card stat-card\">\r\n          <h3>Categories</h3>\r\n          <div className=\"categories-stats\">\r\n            {categoryData.map(category => (\r\n              <div key={category.name} className=\"category-stat\">\r\n                <div className=\"category-name\">{category.name}</div>\r\n                <div className=\"category-bar\">\r\n                  <div \r\n                    className=\"category-progress\"\r\n                    style={{ \r\n                      width: `${(category.completed / (category.count * 30)) * 100}%`,\r\n                      background: `var(--${category.name.toLowerCase() === 'health' ? 'primary-color' : \r\n                                        category.name.toLowerCase() === 'productivity' ? 'secondary-color' : \r\n                                        category.name.toLowerCase() === 'wellness' ? 'accent-color' : \r\n                                        'success-color'})` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                <div className=\"category-metrics\">\r\n                  <span>{category.count} habits</span>\r\n                  <span>Avg streak: {Math.round(category.streakSum / category.count)} days</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {habitData && (\r\n        <div className=\"glass-card habit-stats-card\">\r\n          <h3>Habit Insights: {habitData.title}</h3>\r\n          \r\n          <div className=\"habit-insights\">\r\n            <div className=\"insight-item\">\r\n              <h4>Current Streak</h4>\r\n              <p className=\"insight-value\">{habitData.streak} days</p>\r\n            </div>\r\n            \r\n            <div className=\"insight-item\">\r\n              <h4>Completion Rate</h4>\r\n              <p className=\"insight-value\">\r\n                {Math.round((habitData.history.filter(entry => entry.completed).length / habitData.history.length) * 100)}%\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"insight-item\">\r\n              <h4>Total Completions</h4>\r\n              <p className=\"insight-value\">{habitData.history.filter(entry => entry.completed).length}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"habit-history-chart\">\r\n            <h4>Recent Activity</h4>\r\n            <div className=\"history-bars\">\r\n              {habitData.history\r\n                .filter(entry => entry.date.startsWith(selectedMonth))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date))\r\n                .map(entry => (\r\n                  <div \r\n                    key={entry.date}\r\n                    className=\"history-bar-container\" \r\n                    title={`${entry.date}: ${entry.value} ${habitData.unit}`}\r\n                  >\r\n                    <div \r\n                      className={`history-bar ${entry.completed ? 'completed' : ''}`}\r\n                      style={{ \r\n                        height: `${(entry.value / habitData.target) * 100}%`,\r\n                        backgroundColor: entry.completed ? habitData.color : 'var(--glass-bg)'\r\n                      }}\r\n                    ></div>\r\n                    <div className=\"history-date\">\r\n                      {new Date(entry.date).getDate()}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics; "],"names":["Statistics","habits","useHabits","monthlyData","setMonthlyData","useState","categoryData","setCategoryData","selectedHabit","setSelectedHabit","selectedMonth","setSelectedMonth","today","Date","concat","getFullYear","String","getMonth","padStart","monthOptions","getMonthOptions","options","currentYear","currentMonth","i","month","year","value","label","toLocaleString","push","useEffect","length","split","map","Number","daysInMonth","getDate","dailyData","day","date","activeHabits","filter","habit","habitDate","dayOfWeek","getDay","dayOfMonth","frequency","weeklyDay","monthlyDate","completedCount","history","some","entry","completed","percentage","Math","round","categories","forEach","category","name","count","streakSum","streak","startsWith","Object","values","id","habitData","find","_jsxs","className","children","_jsx","htmlFor","onChange","e","target","option","title","style","backgroundColor","border","width","background","toLowerCase","sort","a","b","unit","height","color"],"sourceRoot":""}