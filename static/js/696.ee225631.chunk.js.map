{"version":3,"file":"static/js/696.ee225631.chunk.js","mappings":"2JAEA,MAuCA,EAvCoBA,IAAwC,IAAvC,WAAEC,EAAU,MAAEC,EAAQ,WAAWF,EACpD,MAAMG,GAAcC,EAAAA,EAAAA,QAAO,MA2B3B,OAzBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcH,EAAYI,QAE5BD,IAEFA,EAAYE,MAAMC,MAAK,GAAAC,OAAMT,EAAU,KAIrCK,EAAYE,MAAMG,WADhBV,EAAa,GACa,6BAAAS,OAAgCR,EAAK,QAAAQ,OAAOR,EAAK,OACpED,EAAa,GACM,6BAAAS,OAAgCR,EAAK,QAAAQ,OAAOR,EAAK,OAEjD,6BAAAQ,OAAgCR,EAAK,QAAAQ,OAAOR,EAAK,KAI3ED,GAAc,IAChBK,EAAYM,UAAUC,IAAI,aAE1BP,EAAYM,UAAUE,OAAO,aAEjC,GACC,CAACb,EAAYC,KAGda,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACjCF,EAAAA,EAAAA,KAAA,OACEG,IAAKf,EACLa,UAAU,eACVR,MAAO,CAAEC,MAAO,SAEd,ECjCJU,GAAYC,EAAAA,EAAAA,OAAKpB,IAAgB,IAADqB,EAAA,IAAd,MAAEC,GAAOtB,EAC/B,MAAM,YAAEuB,EAAW,YAAEC,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,MAC3CC,EAAUC,IAAoBC,EAAAA,EAAAA,UAAS,IACvCC,EAAmBC,IAAwBF,EAAAA,EAAAA,WAAS,IACpDG,EAAkBC,IAAuBJ,EAAAA,EAAAA,WAAS,GAGnDK,GAAU9B,EAAAA,EAAAA,QAAO,MACjB+B,GAAc/B,EAAAA,EAAAA,QAAO,GACrBgC,GAAYhC,EAAAA,EAAAA,QAAO,GAGnBiC,GAAQ,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAG5CC,EAA0B,QAAhBpB,EAAGC,EAAMoB,eAAO,IAAArB,OAAA,EAAbA,EAAesB,MAAKC,GAASA,EAAMC,OAASR,IACzDS,EAAcL,GAAcA,EAAWM,WAG7C1C,EAAAA,EAAAA,YAAU,KAENuB,EADEa,EACeA,EAAWO,MAEX,EACnB,GACC,CAACP,IAGJ,MAAMQ,GAAmBC,EAAAA,EAAAA,cAAaC,IACpChB,EAAY5B,QAAU4C,EAAEC,QAAQ,GAAGC,OAAO,GACzC,IAEGC,GAAiBJ,EAAAA,EAAAA,cAAaC,IAClCf,EAAU7B,QAAU4C,EAAEI,eAAe,GAAGF,QACxCG,GAAa,GACZ,IAEGA,GAAcN,EAAAA,EAAAA,cAAY,KAGRf,EAAY5B,QAAU6B,EAAU7B,SAD7B,KAMlBuC,GACHW,IAEJ,GACC,CAACX,KAGJzC,EAAAA,EAAAA,YAAU,KACR,MAAMqD,EAAsBC,IACtBzB,EAAQ3B,UAAY2B,EAAQ3B,QAAQqD,SAASD,EAAME,SACrD5B,GAAoB,EACtB,EAIF,OADA6B,SAASC,iBAAiB,YAAaL,GAChC,KACLI,SAASE,oBAAoB,YAAaN,EAAmB,CAC9D,GACA,IAEH,MAAMO,GAAuBf,EAAAA,EAAAA,cAAaF,IACxCpB,EAAiBoB,GACjBxB,EAAYF,EAAM4C,GAAIlB,GAGlBA,GAAS1B,EAAMuC,OACjBtC,EAAYD,EAAM4C,GAAI7B,GAAO,EAAMW,GAEnCzB,EAAYD,EAAM4C,GAAI7B,GAAO,EAAOW,EACtC,GACC,CAAC1B,EAAM4C,GAAI5C,EAAMuC,OAAQrC,EAAaD,EAAac,IAEhD8B,GAAkBjB,EAAAA,EAAAA,cAAY,KAClC,MAAMkB,EAAWC,KAAKC,IAAI3C,EAAW,EAAGL,EAAMuC,QAC9CI,EAAqBG,EAAS,GAC7B,CAACzC,EAAUL,EAAMuC,OAAQI,IAEtBR,GAAiBP,EAAAA,EAAAA,cAAY,KACjC3B,EAAYD,EAAM4C,GAAI7B,GAAQS,EAAaA,EAAc,EAAIxB,EAAMuC,QACnEjC,EAAiBkB,EAAc,EAAIxB,EAAMuC,QACzC5B,GAAoB,EAAM,GACzB,CAACX,EAAM4C,GAAI5C,EAAMuC,OAAQf,EAAavB,EAAac,IAEhDkC,GAAgBrB,EAAAA,EAAAA,cAAY,KAChCnB,GAAqB,GACrBE,GAAoB,EAAM,GACzB,IAEGuC,GAAetB,EAAAA,EAAAA,cAAY,KAC/BzB,EAAYH,EAAM4C,IAClBnC,GAAqB,EAAM,GAC1B,CAACN,EAAaH,EAAM4C,KAEjBO,GAAevB,EAAAA,EAAAA,cAAY,KAC/BnB,GAAqB,EAAM,GAC1B,IAGG2C,EAAqBpD,EAAMuC,OAAUlC,EAAWL,EAAMuC,OAAU,IAAM,EAE5E,OAAKvC,GAKHqD,EAAAA,EAAAA,MAAA,OACEzD,IAAKgB,EACLlB,UAAS,yBAAAN,OAA2BoC,EAAc,YAAc,IAChE8B,aAAc3B,EACd4B,WAAYvB,EAAerC,SAAA,EAE3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAAEK,EAAMwD,UAAY,mBAEnD/D,EAAAA,EAAAA,KAAA,UACEC,UAAU,mBACV+D,QAASR,EACT,aAAW,eAActD,SAC1B,UAID0D,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAEK,EAAM0D,MAAQ,YAC3CL,EAAAA,EAAAA,MAAA,OAAA1D,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAEK,EAAM2D,SACnClE,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oBAAmBC,SAAEK,EAAM4D,aAAe,0BAI3DnE,EAAAA,EAAAA,KAACoE,EAAW,CAAClF,WAAYyE,EAAoBxE,MAAOoB,EAAMpB,OAAS,aAEnEyE,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,cAAaC,SAAA,EAC1B0D,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAEU,IAAgB,OAAGZ,EAAAA,EAAAA,KAAA,QAAAE,SAAOK,EAAMuC,SAAc,IAAEvC,EAAM8D,MAAQ,YAElGrE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3B0D,EAAAA,EAAAA,MAAA,QAAA1D,SAAA,CAAM,gBAAIK,EAAM+D,QAAU,EAAE,uBAIhCV,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,oBACV+D,QAASZ,EACTmB,SAAUxC,EAAY7B,UAEtB0D,EAAAA,EAAAA,MAAA,QAAA1D,SAAA,CAAM,MAAIK,EAAM8D,MAAQ,aAE1BrE,EAAAA,EAAAA,KAAA,UACEC,UAAS,OAAAN,OAASoC,EAAc,gBAAkB,eAClDiC,QAAStB,EAAexC,UAExBF,EAAAA,EAAAA,KAAA,QAAAE,SAAO6B,EAAc,OAAS,kBAIjChB,IACCf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrC0D,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,kCAAiCC,SAAA,EAC9CF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJ0D,EAAAA,EAAAA,MAAA,KAAA1D,SAAA,CAAG,oCAAkCK,EAAM2D,MAAM,uCACjDN,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,oBAAoB+D,QAASN,EAAaxD,SAAC,YAC7DF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,iBAAiB+D,QAASP,EAAavD,SAAC,sBA9D7D,IAmED,IAIVE,EAAUoE,YAAc,YAExB,S,qFCnLA,MA2DA,EA3DmBC,KACjB,MAAM,OAAEC,IAAW/D,EAAAA,EAAAA,MACZgE,EAAgBC,IAAqB9D,EAAAA,EAAAA,UAAS,QAC9C+D,EAAYC,IAAiBhE,EAAAA,EAAAA,UAAS,IAGvCiE,EAAa,CAAC,SAAU,IAAIC,IAAIN,EAAOO,KAAI1E,GAASA,EAAMwD,aAG1DmB,EAAiBR,EAAOS,QAAO5E,IACnC,MAAM6E,EAAqC,QAAnBT,GAA4BpE,EAAMwD,WAAaY,EACjEU,EAAgB9E,EAAM2D,MAAMoB,cAAcC,SAASV,EAAWS,gBAC9C/E,EAAM4D,YAAYmB,cAAcC,SAASV,EAAWS,eAE1E,OAAOF,GAAmBC,CAAa,IAGzC,OACEzB,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,mCAAkCC,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,eAE3B0D,EAAAA,EAAAA,MAAA,OAAK3D,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,KAAA,SACEwF,KAAK,OACLC,YAAY,mBACZxD,MAAO4C,EACPa,SAAWtD,GAAM0C,EAAc1C,EAAEU,OAAOb,YAI5CjC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAC9B6E,EAAWE,KAAIlB,IACd/D,EAAAA,EAAAA,KAAA,UAEEC,UAAS,cAAAN,OAAgBgF,IAAmBZ,EAAW,SAAW,IAClEC,QAASA,IAAMY,EAAkBb,GAAU7D,SAE1C6D,EAAS4B,OAAO,GAAGC,cAAgB7B,EAAS8B,MAAM,IAJ9C9B,UAUZmB,EAAeY,OAAS,GACvB9F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzBgF,EAAeD,KAAI1E,IAClBP,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAAgBG,MAAOA,GAAjBA,EAAM4C,SAI1BnD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,gDAGH,C","sources":["components/ProgressBar.js","components/HabitCard.js","pages/HabitsList.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst ProgressBar = ({ percentage, color = '#6d9ee1' }) => {\r\n  const progressRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const progressBar = progressRef.current;\r\n    \r\n    if (progressBar) {\r\n      // Animate progress bar width\r\n      progressBar.style.width = `${percentage}%`;\r\n      \r\n      // Change color based on progress\r\n      if (percentage < 33) {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}88, ${color}aa)`;\r\n      } else if (percentage < 66) {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}aa, ${color}cc)`;\r\n      } else {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}cc, ${color})`;\r\n      }\r\n      \r\n      // Add glowing animation when completed\r\n      if (percentage >= 100) {\r\n        progressBar.classList.add('completed');\r\n      } else {\r\n        progressBar.classList.remove('completed');\r\n      }\r\n    }\r\n  }, [percentage, color]);\r\n  \r\n  return (\r\n    <div className=\"progress-container\">\r\n      <div \r\n        ref={progressRef} \r\n        className=\"progress-bar\"\r\n        style={{ width: '0%' }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar; ","import React, { useState, useEffect, useCallback, memo, useRef } from 'react';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst HabitCard = memo(({ habit }) => {\r\n  const { toggleHabit, setProgress, deleteHabit } = useHabits();\r\n  const [progress, setProgressValue] = useState(0);\r\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\r\n  const [showQuickActions, setShowQuickActions] = useState(false);\r\n  \r\n  // For swipe functionality\r\n  const cardRef = useRef(null);\r\n  const touchStartX = useRef(0);\r\n  const touchEndX = useRef(0);\r\n  \r\n  // Get today's date string\r\n  const today = new Date().toISOString().split('T')[0];\r\n  \r\n  // Find today's entry in habit history\r\n  const todayEntry = habit.history?.find(entry => entry.date === today);\r\n  const isCompleted = todayEntry && todayEntry.completed;\r\n  \r\n  // Set initial progress value based on today's entry\r\n  useEffect(() => {\r\n    if (todayEntry) {\r\n      setProgressValue(todayEntry.value);\r\n    } else {\r\n      setProgressValue(0);\r\n    }\r\n  }, [todayEntry]);\r\n  \r\n  // Mobile swipe handlers\r\n  const handleTouchStart = useCallback((e) => {\r\n    touchStartX.current = e.touches[0].clientX;\r\n  }, []);\r\n  \r\n  const handleTouchEnd = useCallback((e) => {\r\n    touchEndX.current = e.changedTouches[0].clientX;\r\n    handleSwipe();\r\n  }, []);\r\n  \r\n  const handleSwipe = useCallback(() => {\r\n    // Minimum swipe distance (in px)\r\n    const minSwipeDistance = 75;\r\n    const swipeDistance = touchStartX.current - touchEndX.current;\r\n    \r\n    // If swipe right is detected\r\n    if (swipeDistance < -minSwipeDistance) {\r\n      // Quick complete action on swipe right\r\n      if (!isCompleted) {\r\n        handleComplete();\r\n      }\r\n    }\r\n  }, [isCompleted]);\r\n  \r\n  // Click outside to close quick actions\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (cardRef.current && !cardRef.current.contains(event.target)) {\r\n        setShowQuickActions(false);\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n  \r\n  const handleProgressChange = useCallback((value) => {\r\n    setProgressValue(value);\r\n    setProgress(habit.id, value);\r\n    \r\n    // Mark as completed if progress meets target\r\n    if (value >= habit.target) {\r\n      toggleHabit(habit.id, today, true, value);\r\n    } else {\r\n      toggleHabit(habit.id, today, false, value);\r\n    }\r\n  }, [habit.id, habit.target, setProgress, toggleHabit, today]);\r\n  \r\n  const handleIncrement = useCallback(() => {\r\n    const newValue = Math.min(progress + 1, habit.target);\r\n    handleProgressChange(newValue);\r\n  }, [progress, habit.target, handleProgressChange]);\r\n  \r\n  const handleComplete = useCallback(() => {\r\n    toggleHabit(habit.id, today, !isCompleted, isCompleted ? 0 : habit.target);\r\n    setProgressValue(isCompleted ? 0 : habit.target);\r\n    setShowQuickActions(false);\r\n  }, [habit.id, habit.target, isCompleted, toggleHabit, today]);\r\n  \r\n  const confirmDelete = useCallback(() => {\r\n    setShowDeleteConfirm(true);\r\n    setShowQuickActions(false);\r\n  }, []);\r\n  \r\n  const handleDelete = useCallback(() => {\r\n    deleteHabit(habit.id);\r\n    setShowDeleteConfirm(false);\r\n  }, [deleteHabit, habit.id]);\r\n  \r\n  const cancelDelete = useCallback(() => {\r\n    setShowDeleteConfirm(false);\r\n  }, []);\r\n  \r\n  // Calculate progress percentage\r\n  const progressPercentage = habit.target ? (progress / habit.target) * 100 : 0;\r\n  \r\n  if (!habit) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`glass-card habit-card ${isCompleted ? 'completed' : ''}`}\r\n      onTouchStart={handleTouchStart}\r\n      onTouchEnd={handleTouchEnd}\r\n    >\r\n      <div className=\"habit-category\">{habit.category || 'Uncategorized'}</div>\r\n      \r\n      <button \r\n        className=\"delete-habit-btn\" \r\n        onClick={confirmDelete}\r\n        aria-label=\"Delete habit\"\r\n      >\r\n        ×\r\n      </button>\r\n      \r\n      <div className=\"habit-header\">\r\n        <div className=\"habit-icon\">{habit.icon || '✓'}</div>\r\n        <div>\r\n          <h3 className=\"habit-title\">{habit.title}</h3>\r\n          <p className=\"habit-description\">{habit.description || 'No description'}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <ProgressBar percentage={progressPercentage} color={habit.color || '#6d9ee1'} />\r\n      \r\n      <div className=\"habit-stats\">\r\n        <div className=\"habit-target\">\r\n          <span className=\"progress-value\">{progress}</span> / <span>{habit.target}</span> {habit.unit || 'times'}\r\n        </div>\r\n        <div className=\"habit-streak\">\r\n          <span>🔥 {habit.streak || 0} day streak</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"habit-actions\">\r\n        <button \r\n          className=\"btn btn-secondary\" \r\n          onClick={handleIncrement}\r\n          disabled={isCompleted}\r\n        >\r\n          <span>+1 {habit.unit || 'time'}</span>\r\n        </button>\r\n        <button \r\n          className={`btn ${isCompleted ? 'btn-secondary' : 'btn-primary'}`} \r\n          onClick={handleComplete}\r\n        >\r\n          <span>{isCompleted ? 'Undo' : 'Complete'}</span>\r\n        </button>\r\n      </div>\r\n      \r\n      {showDeleteConfirm && (\r\n        <div className=\"delete-confirm-overlay\">\r\n          <div className=\"delete-confirm-modal glass-card\">\r\n            <h4>Delete Habit</h4>\r\n            <p>Are you sure you want to delete \"{habit.title}\"? This action cannot be undone.</p>\r\n            <div className=\"delete-confirm-actions\">\r\n              <button className=\"btn btn-secondary\" onClick={cancelDelete}>Cancel</button>\r\n              <button className=\"btn btn-danger\" onClick={handleDelete}>Delete</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nHabitCard.displayName = 'HabitCard';\r\n\r\nexport default HabitCard; ","import React, { useState } from 'react';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport HabitCard from '../components/HabitCard';\r\n\r\nconst HabitsList = () => {\r\n  const { habits } = useHabits();\r\n  const [filterCategory, setFilterCategory] = useState('all');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  \r\n  // Get unique categories from habits\r\n  const categories = ['all', ...new Set(habits.map(habit => habit.category))];\r\n  \r\n  // Filter habits based on category and search term\r\n  const filteredHabits = habits.filter(habit => {\r\n    const matchesCategory = filterCategory === 'all' || habit.category === filterCategory;\r\n    const matchesSearch = habit.title.toLowerCase().includes(searchTerm.toLowerCase()) || \r\n                          habit.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    return matchesCategory && matchesSearch;\r\n  });\r\n  \r\n  return (\r\n    <div className=\"habits-list-container animate-in\">\r\n      <h2 className=\"page-title\">My Habits</h2>\r\n      \r\n      <div className=\"glass-card filters-card\">\r\n        <div className=\"search-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search habits...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"category-filters\">\r\n          {categories.map(category => (\r\n            <button\r\n              key={category}\r\n              className={`filter-btn ${filterCategory === category ? 'active' : ''}`}\r\n              onClick={() => setFilterCategory(category)}\r\n            >\r\n              {category.charAt(0).toUpperCase() + category.slice(1)}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      {filteredHabits.length > 0 ? (\r\n        <div className=\"habits-grid\">\r\n          {filteredHabits.map(habit => (\r\n            <HabitCard key={habit.id} habit={habit} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"glass-card empty-state\">\r\n          <p>No habits found matching your criteria.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HabitsList; "],"names":["_ref","percentage","color","progressRef","useRef","useEffect","progressBar","current","style","width","concat","background","classList","add","remove","_jsx","className","children","ref","HabitCard","memo","_habit$history","habit","toggleHabit","setProgress","deleteHabit","useHabits","progress","setProgressValue","useState","showDeleteConfirm","setShowDeleteConfirm","showQuickActions","setShowQuickActions","cardRef","touchStartX","touchEndX","today","Date","toISOString","split","todayEntry","history","find","entry","date","isCompleted","completed","value","handleTouchStart","useCallback","e","touches","clientX","handleTouchEnd","changedTouches","handleSwipe","handleComplete","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleProgressChange","id","handleIncrement","newValue","Math","min","confirmDelete","handleDelete","cancelDelete","progressPercentage","_jsxs","onTouchStart","onTouchEnd","category","onClick","icon","title","description","ProgressBar","unit","streak","disabled","displayName","HabitsList","habits","filterCategory","setFilterCategory","searchTerm","setSearchTerm","categories","Set","map","filteredHabits","filter","matchesCategory","matchesSearch","toLowerCase","includes","type","placeholder","onChange","charAt","toUpperCase","slice","length"],"sourceRoot":""}