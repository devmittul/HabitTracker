{"version":3,"file":"static/js/479.3729e9a5.chunk.js","mappings":"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","sources":["pages/Dashboard.js","components/ProgressBar.js","components/HabitCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport HabitCard from '../components/HabitCard';\r\n\r\nconst Dashboard = () => {\r\n  const { habits } = useHabits();\r\n  const [todayHabits, setTodayHabits] = useState([]);\r\n  const [completionRate, setCompletionRate] = useState(0);\r\n  const [longestStreak, setLongestStreak] = useState(0);\r\n  const [quote, setQuote] = useState('');\r\n  \r\n  // Motivational quotes\r\n  const quotes = [\r\n    \"Small daily improvements are the key to staggering long-term results.\",\r\n    \"The only bad workout is the one that didn't happen.\",\r\n    \"A habit cannot be tossed out the window; it must be coaxed down the stairs a step at a time.\",\r\n    \"We first make our habits, and then our habits make us.\",\r\n    \"Motivation is what gets you started. Habit is what keeps you going.\",\r\n    \"Habits are the compound interest of self-improvement.\",\r\n    \"Success is the sum of small efforts, repeated day in and day out.\"\r\n  ];\r\n  \r\n  useEffect(() => {\r\n    // Set random quote\r\n    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\r\n    setQuote(randomQuote);\r\n    \r\n    // Filter habits for today based on frequency\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n    const dayOfMonth = today.getDate();\r\n    \r\n    const filteredHabits = habits.filter(habit => {\r\n      switch (habit.frequency) {\r\n        case 'daily':\r\n          return true;\r\n        case 'weekly':\r\n          // If the habit is set to weekly (e.g., Monday), check if today matches\r\n          return dayOfWeek === (habit.weeklyDay || 1); // Default to Monday\r\n        case 'monthly':\r\n          // If the habit is set to monthly (e.g., 1st of the month), check if today matches\r\n          return dayOfMonth === (habit.monthlyDate || 1); // Default to 1st of month\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n    \r\n    setTodayHabits(filteredHabits);\r\n    \r\n    // Calculate completion rate\r\n    if (filteredHabits.length > 0) {\r\n      const todayStr = today.toISOString().split('T')[0];\r\n      const completedCount = filteredHabits.filter(habit => \r\n        habit.history.some(entry => entry.date === todayStr && entry.completed)\r\n      ).length;\r\n      \r\n      setCompletionRate(Math.round((completedCount / filteredHabits.length) * 100));\r\n    }\r\n    \r\n    // Find longest streak\r\n    if (habits.length > 0) {\r\n      const maxStreak = Math.max(...habits.map(habit => habit.streak));\r\n      setLongestStreak(maxStreak);\r\n    }\r\n  }, [habits]);\r\n  \r\n  return (\r\n    <div className=\"dashboard-container animate-in\">\r\n      <h2 className=\"page-title\">Today's Overview</h2>\r\n      \r\n      <div className=\"glass-card quote-card\">\r\n        <p className=\"quote\">\"{quote}\"</p>\r\n      </div>\r\n      \r\n      <div className=\"stats-grid\">\r\n        <div className=\"glass-card stat-card\">\r\n          <h3>Today's Progress</h3>\r\n          <div className=\"progress-container\">\r\n            <div \r\n              className=\"progress-bar\" \r\n              style={{ \r\n                width: `${completionRate}%`,\r\n                background: `linear-gradient(to right, var(--primary-color), var(--secondary-color))`\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <p className=\"stat-value\">{completionRate}% Complete</p>\r\n        </div>\r\n        \r\n        <div className=\"glass-card stat-card\">\r\n          <h3>Total Habits</h3>\r\n          <p className=\"stat-value\">{habits.length}</p>\r\n        </div>\r\n        \r\n        <div className=\"glass-card stat-card\">\r\n          <h3>Longest Streak</h3>\r\n          <p className=\"stat-value\">🔥 {longestStreak} days</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <h2 className=\"section-title\">Today's Habits</h2>\r\n      \r\n      {todayHabits.length > 0 ? (\r\n        <div className=\"habits-grid\">\r\n          {todayHabits.map(habit => (\r\n            <HabitCard key={habit.id} habit={habit} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"glass-card empty-state\">\r\n          <p>No habits for today. Add a new habit to get started!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard; ","import React, { useEffect, useRef } from 'react';\r\n\r\nconst ProgressBar = ({ percentage, color = '#6d9ee1' }) => {\r\n  const progressRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const progressBar = progressRef.current;\r\n    \r\n    if (progressBar) {\r\n      // Animate progress bar width\r\n      progressBar.style.width = `${percentage}%`;\r\n      \r\n      // Change color based on progress\r\n      if (percentage < 33) {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}88, ${color}aa)`;\r\n      } else if (percentage < 66) {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}aa, ${color}cc)`;\r\n      } else {\r\n        progressBar.style.background = `linear-gradient(to right, ${color}cc, ${color})`;\r\n      }\r\n      \r\n      // Add glowing animation when completed\r\n      if (percentage >= 100) {\r\n        progressBar.classList.add('completed');\r\n      } else {\r\n        progressBar.classList.remove('completed');\r\n      }\r\n    }\r\n  }, [percentage, color]);\r\n  \r\n  return (\r\n    <div className=\"progress-container\">\r\n      <div \r\n        ref={progressRef} \r\n        className=\"progress-bar\"\r\n        style={{ width: '0%' }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar; ","import React, { useState, useEffect, useCallback, memo, useRef } from 'react';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst HabitCard = memo(({ habit }) => {\r\n  const { toggleHabit, setProgress, deleteHabit } = useHabits();\r\n  const [progress, setProgressValue] = useState(0);\r\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\r\n  const [showQuickActions, setShowQuickActions] = useState(false);\r\n  \r\n  // For swipe functionality\r\n  const cardRef = useRef(null);\r\n  const touchStartX = useRef(0);\r\n  const touchEndX = useRef(0);\r\n  \r\n  // Get today's date string\r\n  const today = new Date().toISOString().split('T')[0];\r\n  \r\n  // Find today's entry in habit history\r\n  const todayEntry = habit.history?.find(entry => entry.date === today);\r\n  const isCompleted = todayEntry && todayEntry.completed;\r\n  \r\n  // Set initial progress value based on today's entry\r\n  useEffect(() => {\r\n    if (todayEntry) {\r\n      setProgressValue(todayEntry.value);\r\n    } else {\r\n      setProgressValue(0);\r\n    }\r\n  }, [todayEntry]);\r\n  \r\n  // Mobile swipe handlers\r\n  const handleTouchStart = useCallback((e) => {\r\n    touchStartX.current = e.touches[0].clientX;\r\n  }, []);\r\n  \r\n  const handleTouchEnd = useCallback((e) => {\r\n    touchEndX.current = e.changedTouches[0].clientX;\r\n    handleSwipe();\r\n  }, []);\r\n  \r\n  const handleSwipe = useCallback(() => {\r\n    // Minimum swipe distance (in px)\r\n    const minSwipeDistance = 75;\r\n    const swipeDistance = touchStartX.current - touchEndX.current;\r\n    \r\n    // If swipe right is detected\r\n    if (swipeDistance < -minSwipeDistance) {\r\n      // Quick complete action on swipe right\r\n      if (!isCompleted) {\r\n        handleComplete();\r\n      }\r\n    }\r\n  }, [isCompleted]);\r\n  \r\n  // Click outside to close quick actions\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (cardRef.current && !cardRef.current.contains(event.target)) {\r\n        setShowQuickActions(false);\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n  \r\n  const handleProgressChange = useCallback((value) => {\r\n    setProgressValue(value);\r\n    setProgress(habit.id, value);\r\n    \r\n    // Mark as completed if progress meets target\r\n    if (value >= habit.target) {\r\n      toggleHabit(habit.id, today, true, value);\r\n    } else {\r\n      toggleHabit(habit.id, today, false, value);\r\n    }\r\n  }, [habit.id, habit.target, setProgress, toggleHabit, today]);\r\n  \r\n  const handleIncrement = useCallback(() => {\r\n    const newValue = Math.min(progress + 1, habit.target);\r\n    handleProgressChange(newValue);\r\n  }, [progress, habit.target, handleProgressChange]);\r\n  \r\n  const handleComplete = useCallback(() => {\r\n    toggleHabit(habit.id, today, !isCompleted, isCompleted ? 0 : habit.target);\r\n    setProgressValue(isCompleted ? 0 : habit.target);\r\n    setShowQuickActions(false);\r\n  }, [habit.id, habit.target, isCompleted, toggleHabit, today]);\r\n  \r\n  const confirmDelete = useCallback(() => {\r\n    setShowDeleteConfirm(true);\r\n    setShowQuickActions(false);\r\n  }, []);\r\n  \r\n  const handleDelete = useCallback(() => {\r\n    deleteHabit(habit.id);\r\n    setShowDeleteConfirm(false);\r\n  }, [deleteHabit, habit.id]);\r\n  \r\n  const cancelDelete = useCallback(() => {\r\n    setShowDeleteConfirm(false);\r\n  }, []);\r\n  \r\n  // Calculate progress percentage\r\n  const progressPercentage = habit.target ? (progress / habit.target) * 100 : 0;\r\n  \r\n  if (!habit) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`glass-card habit-card ${isCompleted ? 'completed' : ''}`}\r\n      onTouchStart={handleTouchStart}\r\n      onTouchEnd={handleTouchEnd}\r\n    >\r\n      <div className=\"habit-category\">{habit.category || 'Uncategorized'}</div>\r\n      \r\n      <button \r\n        className=\"delete-habit-btn\" \r\n        onClick={confirmDelete}\r\n        aria-label=\"Delete habit\"\r\n      >\r\n        ×\r\n      </button>\r\n      \r\n      <div className=\"habit-header\">\r\n        <div className=\"habit-icon\">{habit.icon || '✓'}</div>\r\n        <div>\r\n          <h3 className=\"habit-title\">{habit.title}</h3>\r\n          <p className=\"habit-description\">{habit.description || 'No description'}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <ProgressBar percentage={progressPercentage} color={habit.color || '#6d9ee1'} />\r\n      \r\n      <div className=\"habit-stats\">\r\n        <div className=\"habit-target\">\r\n          <span className=\"progress-value\">{progress}</span> / <span>{habit.target}</span> {habit.unit || 'times'}\r\n        </div>\r\n        <div className=\"habit-streak\">\r\n          <span>🔥 {habit.streak || 0} day streak</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"habit-actions\">\r\n        <button \r\n          className=\"btn btn-secondary\" \r\n          onClick={handleIncrement}\r\n          disabled={isCompleted}\r\n        >\r\n          <span>+1 {habit.unit || 'time'}</span>\r\n        </button>\r\n        <button \r\n          className={`btn ${isCompleted ? 'btn-secondary' : 'btn-primary'}`} \r\n          onClick={handleComplete}\r\n        >\r\n          <span>{isCompleted ? 'Undo' : 'Complete'}</span>\r\n        </button>\r\n      </div>\r\n      \r\n      {showDeleteConfirm && (\r\n        <div className=\"delete-confirm-overlay\">\r\n          <div className=\"delete-confirm-modal glass-card\">\r\n            <h4>Delete Habit</h4>\r\n            <p>Are you sure you want to delete \"{habit.title}\"? This action cannot be undone.</p>\r\n            <div className=\"delete-confirm-actions\">\r\n              <button className=\"btn btn-secondary\" onClick={cancelDelete}>Cancel</button>\r\n              <button className=\"btn btn-danger\" onClick={handleDelete}>Delete</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nHabitCard.displayName = 'HabitCard';\r\n\r\nexport default HabitCard; "],"names":["Dashboard","habits","useHabits","todayHabits","setTodayHabits","useState","completionRate","setCompletionRate","longestStreak","setLongestStreak","quote","setQuote","quotes","useEffect","randomQuote","Math","floor","random","length","today","Date","dayOfWeek","getDay","dayOfMonth","getDate","filteredHabits","filter","habit","frequency","weeklyDay","monthlyDate","todayStr","toISOString","split","completedCount","history","some","entry","date","completed","round","maxStreak","max","map","streak","_jsxs","className","children","_jsx","style","width","concat","background","HabitCard","id","_ref","percentage","color","progressRef","useRef","progressBar","current","classList","add","remove","ref","memo","_habit$history","toggleHabit","setProgress","deleteHabit","progress","setProgressValue","showDeleteConfirm","setShowDeleteConfirm","showQuickActions","setShowQuickActions","cardRef","touchStartX","touchEndX","todayEntry","find","isCompleted","value","handleTouchStart","useCallback","e","touches","clientX","handleTouchEnd","changedTouches","handleSwipe","handleComplete","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleProgressChange","handleIncrement","newValue","min","confirmDelete","handleDelete","cancelDelete","progressPercentage","onTouchStart","onTouchEnd","category","onClick","icon","title","description","ProgressBar","unit","disabled","displayName"],"sourceRoot":""}