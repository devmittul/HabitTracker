{"version":3,"file":"static/js/733.93e8eb06.chunk.js","mappings":"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","sources":["components/ReminderControl.js","pages/AddHabit.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { requestNotificationPermission, areNotificationsSupported } from '../utils/notificationService';\r\n\r\nconst ReminderControl = ({ \r\n  enabled = false, \r\n  time = '20:00', \r\n  onChange,\r\n  onPermissionChange\r\n}) => {\r\n  const [isEnabled, setIsEnabled] = useState(enabled);\r\n  const [reminderTime, setReminderTime] = useState(time);\r\n  const [notificationsSupported, setNotificationsSupported] = useState(false);\r\n  const [permissionStatus, setPermissionStatus] = useState('default');\r\n  \r\n  // Check if notifications are supported on component mount\r\n  useEffect(() => {\r\n    const supported = areNotificationsSupported();\r\n    setNotificationsSupported(supported);\r\n    \r\n    if (supported && 'Notification' in window) {\r\n      setPermissionStatus(Notification.permission);\r\n    }\r\n  }, []);\r\n  \r\n  // Handle toggle change\r\n  const handleToggleChange = async (e) => {\r\n    const newEnabled = e.target.checked;\r\n    setIsEnabled(newEnabled);\r\n    \r\n    // If enabling reminders, check permission\r\n    if (newEnabled && permissionStatus !== 'granted') {\r\n      const { status } = await requestNotificationPermission();\r\n      setPermissionStatus(status);\r\n      \r\n      // Notify parent component about permission change\r\n      if (onPermissionChange) {\r\n        onPermissionChange(status);\r\n      }\r\n      \r\n      // If permission was denied, disable the toggle\r\n      if (status !== 'granted') {\r\n        setIsEnabled(false);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Notify parent component of change\r\n    if (onChange) {\r\n      onChange(newEnabled, reminderTime);\r\n    }\r\n  };\r\n  \r\n  // Handle time change\r\n  const handleTimeChange = (e) => {\r\n    const newTime = e.target.value;\r\n    setReminderTime(newTime);\r\n    \r\n    // Only notify parent if reminders are enabled\r\n    if (isEnabled && onChange) {\r\n      onChange(isEnabled, newTime);\r\n    }\r\n  };\r\n  \r\n  if (!notificationsSupported) {\r\n    return (\r\n      <div className=\"reminder-control\">\r\n        <p className=\"unsupported-message\">\r\n          Reminders are not supported in your browser.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"reminder-control\">\r\n      <div className=\"reminder-toggle-container\">\r\n        <label className=\"toggle-switch\">\r\n          <input \r\n            type=\"checkbox\" \r\n            checked={isEnabled} \r\n            onChange={handleToggleChange} \r\n          />\r\n          <span className=\"toggle-slider\"></span>\r\n        </label>\r\n        <span className=\"reminder-label\">Daily Reminder</span>\r\n        \r\n        {permissionStatus === 'denied' && (\r\n          <div className=\"permission-denied-message\">\r\n            Notification permission was denied. Please enable notifications in your browser settings.\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {isEnabled && permissionStatus === 'granted' && (\r\n        <div className=\"time-picker-container\">\r\n          <label htmlFor=\"reminderTime\">Reminder Time:</label>\r\n          <input \r\n            type=\"time\" \r\n            id=\"reminderTime\"\r\n            value={reminderTime}\r\n            onChange={handleTimeChange}\r\n            className=\"time-input\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReminderControl; ","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport ReminderControl from '../components/ReminderControl';\r\n\r\nconst AddHabit = () => {\r\n  const navigate = useNavigate();\r\n  const { addHabit } = useHabits();\r\n  \r\n  const [habit, setHabit] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: 'Health',\r\n    icon: '💧',\r\n    target: 1,\r\n    unit: 'times',\r\n    frequency: 'daily',\r\n    weeklyDay: 1,\r\n    monthlyDate: 1,\r\n    color: '#6d9ee1',\r\n    reminderEnabled: false,\r\n    reminderTime: '20:00'\r\n  });\r\n  \r\n  const icons = ['💧', '🏃‍♂️', '📚', '🧘‍♀️', '🍎', '💤', '💻', '🎵', '🏋️‍♀️', '🧹', '💊', '🚰'];\r\n  const categories = ['Health', 'Productivity', 'Wellness', 'Fitness', 'Learning', 'Finance'];\r\n  const colors = ['#6d9ee1', '#a991d4', '#f9c5d1', '#b0e0a8', '#f9d89c', '#f4a7a7'];\r\n  \r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setHabit(prev => ({\r\n      ...prev,\r\n      [name]: name === 'target' ? parseInt(value) || 1 : value\r\n    }));\r\n  };\r\n  \r\n  const handleReminderChange = (enabled, time) => {\r\n    setHabit(prev => ({\r\n      ...prev,\r\n      reminderEnabled: enabled,\r\n      reminderTime: time\r\n    }));\r\n  };\r\n  \r\n  const handlePermissionChange = (status) => {\r\n    // If permission was denied, we might want to show a message or take some action\r\n    if (status !== 'granted') {\r\n      console.log('Notification permission not granted');\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addHabit(habit);\r\n    navigate('/habits');\r\n  };\r\n  \r\n  return (\r\n    <div className=\"add-habit-container animate-in\">\r\n      <h2 className=\"page-title\">Add New Habit</h2>\r\n      \r\n      <div className=\"glass-card form-card\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">Habit Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"title\"\r\n              name=\"title\"\r\n              placeholder=\"E.g., Drink Water\"\r\n              value={habit.title}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              id=\"description\"\r\n              name=\"description\"\r\n              placeholder=\"E.g., Drink 8 glasses of water daily\"\r\n              value={habit.description}\r\n              onChange={handleChange}\r\n            ></textarea>\r\n          </div>\r\n          \r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"category\">Category</label>\r\n              <select \r\n                id=\"category\" \r\n                name=\"category\" \r\n                value={habit.category} \r\n                onChange={handleChange}\r\n              >\r\n                {categories.map(category => (\r\n                  <option key={category} value={category}>{category}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"frequency\">Frequency</label>\r\n              <select \r\n                id=\"frequency\" \r\n                name=\"frequency\" \r\n                value={habit.frequency} \r\n                onChange={handleChange}\r\n              >\r\n                <option value=\"daily\">Daily</option>\r\n                <option value=\"weekly\">Weekly</option>\r\n                <option value=\"monthly\">Monthly</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          \r\n          {habit.frequency === 'weekly' && (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"weeklyDay\">Day of Week</label>\r\n              <select \r\n                id=\"weeklyDay\" \r\n                name=\"weeklyDay\" \r\n                value={habit.weeklyDay} \r\n                onChange={handleChange}\r\n              >\r\n                <option value={1}>Monday</option>\r\n                <option value={2}>Tuesday</option>\r\n                <option value={3}>Wednesday</option>\r\n                <option value={4}>Thursday</option>\r\n                <option value={5}>Friday</option>\r\n                <option value={6}>Saturday</option>\r\n                <option value={0}>Sunday</option>\r\n              </select>\r\n            </div>\r\n          )}\r\n          \r\n          {habit.frequency === 'monthly' && (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"monthlyDate\">Day of Month</label>\r\n              <select \r\n                id=\"monthlyDate\" \r\n                name=\"monthlyDate\" \r\n                value={habit.monthlyDate} \r\n                onChange={handleChange}\r\n              >\r\n                {[...Array(31)].map((_, i) => (\r\n                  <option key={i+1} value={i+1}>{i+1}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"target\">Target</label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"target\"\r\n                name=\"target\"\r\n                min=\"1\"\r\n                value={habit.target}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"unit\">Unit</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"unit\"\r\n                name=\"unit\"\r\n                placeholder=\"times, glasses, minutes, etc.\"\r\n                value={habit.unit}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label>Icon</label>\r\n            <div className=\"icons-grid\">\r\n              {icons.map(icon => (\r\n                <div \r\n                  key={icon}\r\n                  className={`icon-option ${habit.icon === icon ? 'selected' : ''}`}\r\n                  onClick={() => setHabit(prev => ({ ...prev, icon }))}\r\n                >\r\n                  {icon}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label>Color</label>\r\n            <div className=\"colors-grid\">\r\n              {colors.map(color => (\r\n                <div \r\n                  key={color}\r\n                  className={`color-option ${habit.color === color ? 'selected' : ''}`}\r\n                  style={{ backgroundColor: color }}\r\n                  onClick={() => setHabit(prev => ({ ...prev, color }))}\r\n                >\r\n                  {habit.color === color && '✓'}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label>Reminder</label>\r\n            <ReminderControl \r\n              enabled={habit.reminderEnabled}\r\n              time={habit.reminderTime}\r\n              onChange={handleReminderChange}\r\n              onPermissionChange={handlePermissionChange}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-actions\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => navigate('/habits')}>\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Add Habit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddHabit; "],"names":["_ref","enabled","time","onChange","onPermissionChange","isEnabled","setIsEnabled","useState","reminderTime","setReminderTime","notificationsSupported","setNotificationsSupported","permissionStatus","setPermissionStatus","useEffect","supported","areNotificationsSupported","window","Notification","permission","_jsxs","className","children","_jsx","type","checked","async","newEnabled","e","target","status","requestNotificationPermission","htmlFor","id","value","newTime","AddHabit","navigate","useNavigate","addHabit","useHabits","habit","setHabit","title","description","category","icon","unit","frequency","weeklyDay","monthlyDate","color","reminderEnabled","handleChange","name","prev","_objectSpread","parseInt","onSubmit","preventDefault","placeholder","required","map","Array","_","i","min","concat","onClick","style","backgroundColor","ReminderControl","handleReminderChange","console","log"],"sourceRoot":""}