{"version":3,"file":"static/js/388.73950dad.chunk.js","mappings":"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","sources":["utils/dataManagement.js","pages/Settings.js"],"sourcesContent":["/**\r\n * Data Management Utilities\r\n * Provides functionality for importing and exporting habit data\r\n */\r\n\r\n// Export habits data to a JSON file\r\nexport const exportData = (habits) => {\r\n  try {\r\n    // Create a data object with metadata and habits\r\n    const exportData = {\r\n      version: '1.0',\r\n      exportDate: new Date().toISOString(),\r\n      data: habits\r\n    };\r\n    \r\n    // Convert to JSON string\r\n    const jsonString = JSON.stringify(exportData, null, 2);\r\n    \r\n    // Create a blob and download link\r\n    const blob = new Blob([jsonString], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    // Create temporary link and trigger download\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `habit-tracker-backup-${new Date().toISOString().slice(0, 10)}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    \r\n    // Clean up\r\n    setTimeout(() => {\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n    }, 100);\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error exporting data:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n// Import habits data from a JSON file\r\nexport const importData = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = (event) => {\r\n        try {\r\n          const importedData = JSON.parse(event.target.result);\r\n          \r\n          // Validate the imported data\r\n          if (!importedData.data || !Array.isArray(importedData.data)) {\r\n            return reject({ \r\n              success: false, \r\n              error: 'Invalid file format. Expected habits data array.' \r\n            });\r\n          }\r\n          \r\n          resolve({ \r\n            success: true, \r\n            data: importedData.data,\r\n            metadata: {\r\n              version: importedData.version,\r\n              exportDate: importedData.exportDate\r\n            }\r\n          });\r\n          \r\n        } catch (parseError) {\r\n          reject({ \r\n            success: false, \r\n            error: 'Failed to parse JSON data.' \r\n          });\r\n        }\r\n      };\r\n      \r\n      reader.onerror = () => {\r\n        reject({ \r\n          success: false, \r\n          error: 'Error reading file.' \r\n        });\r\n      };\r\n      \r\n      reader.readAsText(file);\r\n      \r\n    } catch (error) {\r\n      reject({ \r\n        success: false, \r\n        error: 'Error importing data.'\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// Merge imported data with existing data\r\nexport const mergeData = (existingHabits, importedHabits) => {\r\n  try {\r\n    // Create a map of existing habits by ID for quick lookup\r\n    const existingHabitsMap = new Map(\r\n      existingHabits.map(habit => [habit.id, habit])\r\n    );\r\n    \r\n    // Process each imported habit\r\n    const mergedHabits = [...existingHabits];\r\n    \r\n    importedHabits.forEach(importedHabit => {\r\n      if (existingHabitsMap.has(importedHabit.id)) {\r\n        // Habit with this ID already exists, update properties\r\n        const index = mergedHabits.findIndex(h => h.id === importedHabit.id);\r\n        mergedHabits[index] = {\r\n          ...mergedHabits[index],\r\n          ...importedHabit,\r\n          // Merge history entries\r\n          history: mergeHistoryEntries(\r\n            mergedHabits[index].history || [],\r\n            importedHabit.history || []\r\n          )\r\n        };\r\n      } else {\r\n        // New habit, add to the merged list\r\n        mergedHabits.push(importedHabit);\r\n      }\r\n    });\r\n    \r\n    return { success: true, data: mergedHabits };\r\n  } catch (error) {\r\n    console.error('Error merging data:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n// Helper function to merge history entries\r\nconst mergeHistoryEntries = (existingEntries, importedEntries) => {\r\n  // Create a map of existing entries by date\r\n  const entriesMap = new Map(\r\n    existingEntries.map(entry => [entry.date, entry])\r\n  );\r\n  \r\n  // Add or update with imported entries\r\n  importedEntries.forEach(entry => {\r\n    if (entriesMap.has(entry.date)) {\r\n      // Use the entry with the higher value or the completed one\r\n      const existingEntry = entriesMap.get(entry.date);\r\n      if (entry.completed && !existingEntry.completed) {\r\n        entriesMap.set(entry.date, entry);\r\n      } else if (entry.value > (existingEntry.value || 0)) {\r\n        entriesMap.set(entry.date, entry);\r\n      }\r\n    } else {\r\n      entriesMap.set(entry.date, entry);\r\n    }\r\n  });\r\n  \r\n  // Convert map back to array\r\n  return Array.from(entriesMap.values());\r\n}; ","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTheme } from '../context/ThemeContext';\r\nimport { useHabits } from '../context/HabitContext';\r\nimport { exportData, importData, mergeData } from '../utils/dataManagement';\r\nimport { requestNotificationPermission } from '../utils/notificationService';\r\n\r\nconst Settings = () => {\r\n  const { darkMode, toggleDarkMode } = useTheme();\r\n  const { habits, isLoaded } = useHabits();\r\n  const [settings, setSettings] = useState({\r\n    notifications: true,\r\n    reminderTime: '20:00',\r\n    achievementsEnabled: true,\r\n    exportData: false,\r\n    autoDelete: false,\r\n    autoDeleteDays: 30\r\n  });\r\n  const [importStatus, setImportStatus] = useState({\r\n    status: null, // 'success', 'error', or null\r\n    message: ''\r\n  });\r\n  const fileInputRef = useRef(null);\r\n  \r\n  // Load settings from localStorage on component mount\r\n  useEffect(() => {\r\n    const savedSettings = localStorage.getItem('appSettings');\r\n    if (savedSettings) {\r\n      setSettings(JSON.parse(savedSettings));\r\n    }\r\n  }, []);\r\n  \r\n  // Save settings to localStorage when they change\r\n  useEffect(() => {\r\n    localStorage.setItem('appSettings', JSON.stringify(settings));\r\n  }, [settings]);\r\n  \r\n  // Request notification permission if enabled\r\n  useEffect(() => {\r\n    if (settings.notifications) {\r\n      requestNotificationPermission();\r\n    }\r\n  }, [settings.notifications]);\r\n  \r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }));\r\n  };\r\n  \r\n  const handleReset = () => {\r\n    // Confirm before resetting\r\n    if (window.confirm('Are you sure you want to reset all settings to default?')) {\r\n      setSettings({\r\n        notifications: true,\r\n        reminderTime: '20:00',\r\n        achievementsEnabled: true,\r\n        exportData: false,\r\n        autoDelete: false,\r\n        autoDeleteDays: 30\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleExportData = () => {\r\n    if (!isLoaded || habits.length === 0) {\r\n      setImportStatus({\r\n        status: 'error',\r\n        message: 'No habits data to export'\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const result = exportData(habits);\r\n    if (result.success) {\r\n      setImportStatus({\r\n        status: 'success',\r\n        message: 'Data exported successfully'\r\n      });\r\n    } else {\r\n      setImportStatus({\r\n        status: 'error',\r\n        message: 'Failed to export data: ' + (result.error?.message || 'Unknown error')\r\n      });\r\n    }\r\n  };\r\n  \r\n  const triggerFileInput = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n  \r\n  const handleImportFile = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    \r\n    try {\r\n      setImportStatus({\r\n        status: 'loading',\r\n        message: 'Importing data...'\r\n      });\r\n      \r\n      const result = await importData(file);\r\n      \r\n      if (result.success) {\r\n        // Add imported habits to existing habits using localStorage\r\n        const importedHabits = result.data;\r\n        \r\n        // Since we can't directly update the context from here,\r\n        // we'll use localStorage to trigger an update\r\n        const savedHabits = JSON.parse(localStorage.getItem('habits') || '[]');\r\n        const mergeResult = mergeData(savedHabits, importedHabits);\r\n        \r\n        if (mergeResult.success) {\r\n          localStorage.setItem('habits', JSON.stringify(mergeResult.data));\r\n          setImportStatus({\r\n            status: 'success',\r\n            message: `Successfully imported ${importedHabits.length} habits. Reload the app to see changes.`\r\n          });\r\n        } else {\r\n          setImportStatus({\r\n            status: 'error',\r\n            message: 'Error merging data: ' + (mergeResult.error?.message || 'Unknown error')\r\n          });\r\n        }\r\n      } else {\r\n        setImportStatus({\r\n          status: 'error',\r\n          message: result.error || 'Failed to import data'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setImportStatus({\r\n        status: 'error',\r\n        message: 'Error: ' + (error.message || 'Unknown error')\r\n      });\r\n    }\r\n    \r\n    // Reset file input\r\n    e.target.value = '';\r\n  };\r\n  \r\n  return (\r\n    <div className=\"settings-container animate-in\">\r\n      <h2 className=\"page-title\">Settings</h2>\r\n      \r\n      <div className=\"glass-card settings-card\">\r\n        <h3>Appearance</h3>\r\n        \r\n        <div className=\"setting-item\">\r\n          <div className=\"setting-label\">\r\n            <span>Dark Mode</span>\r\n            <p className=\"setting-description\">Switch between light and dark theme</p>\r\n          </div>\r\n          <div className=\"setting-control\">\r\n            <label className=\"toggle-switch\">\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={darkMode} \r\n                onChange={toggleDarkMode}\r\n              />\r\n              <span className=\"toggle-slider\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"glass-card settings-card\">\r\n        <h3>Notifications</h3>\r\n        \r\n        <div className=\"setting-item\">\r\n          <div className=\"setting-label\">\r\n            <span>Enable Notifications</span>\r\n            <p className=\"setting-description\">Get reminders for your habits</p>\r\n          </div>\r\n          <div className=\"setting-control\">\r\n            <label className=\"toggle-switch\">\r\n              <input \r\n                type=\"checkbox\" \r\n                name=\"notifications\"\r\n                checked={settings.notifications} \r\n                onChange={handleChange}\r\n              />\r\n              <span className=\"toggle-slider\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        {settings.notifications && (\r\n          <div className=\"setting-item\">\r\n            <div className=\"setting-label\">\r\n              <span>Reminder Time</span>\r\n              <p className=\"setting-description\">When to send daily reminders</p>\r\n            </div>\r\n            <div className=\"setting-control\">\r\n              <input \r\n                type=\"time\" \r\n                name=\"reminderTime\"\r\n                value={settings.reminderTime} \r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"glass-card settings-card\">\r\n        <h3>Achievements & Gamification</h3>\r\n        \r\n        <div className=\"setting-item\">\r\n          <div className=\"setting-label\">\r\n            <span>Enable Achievements</span>\r\n            <p className=\"setting-description\">Earn badges for completing habits</p>\r\n          </div>\r\n          <div className=\"setting-control\">\r\n            <label className=\"toggle-switch\">\r\n              <input \r\n                type=\"checkbox\" \r\n                name=\"achievementsEnabled\"\r\n                checked={settings.achievementsEnabled} \r\n                onChange={handleChange}\r\n              />\r\n              <span className=\"toggle-slider\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"glass-card settings-card\">\r\n        <h3>Data Management</h3>\r\n        \r\n        <div className=\"setting-item\">\r\n          <div className=\"setting-label\">\r\n            <span>Export Data to Cloud</span>\r\n            <p className=\"setting-description\">Sync your habits across devices</p>\r\n          </div>\r\n          <div className=\"setting-control\">\r\n            <label className=\"toggle-switch\">\r\n              <input \r\n                type=\"checkbox\" \r\n                name=\"exportData\"\r\n                checked={settings.exportData} \r\n                onChange={handleChange}\r\n              />\r\n              <span className=\"toggle-slider\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"setting-item\">\r\n          <div className=\"setting-label\">\r\n            <span>Auto-delete Old Data</span>\r\n            <p className=\"setting-description\">Remove habit entries older than specified days</p>\r\n          </div>\r\n          <div className=\"setting-control\">\r\n            <label className=\"toggle-switch\">\r\n              <input \r\n                type=\"checkbox\" \r\n                name=\"autoDelete\"\r\n                checked={settings.autoDelete} \r\n                onChange={handleChange}\r\n              />\r\n              <span className=\"toggle-slider\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        {settings.autoDelete && (\r\n          <div className=\"setting-item\">\r\n            <div className=\"setting-label\">\r\n              <span>Days to Keep</span>\r\n              <p className=\"setting-description\">Number of days to keep habit data</p>\r\n            </div>\r\n            <div className=\"setting-control\">\r\n              <input \r\n                type=\"number\" \r\n                name=\"autoDeleteDays\"\r\n                min=\"7\"\r\n                max=\"365\"\r\n                value={settings.autoDeleteDays} \r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"backup-restore-section\">\r\n          <h4>Backup and Restore</h4>\r\n          <p className=\"setting-description\">Save your habits data or restore from a backup file</p>\r\n          \r\n          <div className=\"backup-restore-buttons\">\r\n            <button \r\n              className=\"btn btn-secondary\" \r\n              onClick={handleExportData}\r\n              disabled={!isLoaded || habits.length === 0}\r\n            >\r\n              Export Data\r\n            </button>\r\n            \r\n            <button \r\n              className=\"btn btn-secondary\" \r\n              onClick={triggerFileInput}\r\n            >\r\n              Import Data\r\n            </button>\r\n            \r\n            <input \r\n              type=\"file\" \r\n              ref={fileInputRef}\r\n              style={{ display: 'none' }}\r\n              accept=\".json\"\r\n              onChange={handleImportFile}\r\n            />\r\n          </div>\r\n          \r\n          {importStatus.status && (\r\n            <div className={`import-status ${importStatus.status}`}>\r\n              <p>{importStatus.message}</p>\r\n              {importStatus.status === 'success' && (\r\n                <button \r\n                  className=\"btn btn-primary\"\r\n                  onClick={() => window.location.reload()}\r\n                >\r\n                  Reload App\r\n                </button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"setting-actions\">\r\n          <button className=\"btn btn-secondary\" onClick={handleReset}>\r\n            Reset to Default\r\n          </button>\r\n          <button className=\"btn btn-primary\">\r\n            Save Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"glass-card about-card\">\r\n        <h3>About</h3>\r\n        <p>Habit Tracker v1.0.0</p>\r\n        <p>A beautiful habit tracking app with modern UI</p>\r\n        <p>© 2025 Habit Tracker</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings; "],"names":["mergeHistoryEntries","existingEntries","importedEntries","entriesMap","Map","map","entry","date","forEach","has","existingEntry","get","completed","value","set","Array","from","values","Settings","darkMode","toggleDarkMode","useTheme","habits","isLoaded","useHabits","settings","setSettings","useState","notifications","reminderTime","achievementsEnabled","exportData","autoDelete","autoDeleteDays","importStatus","setImportStatus","status","message","fileInputRef","useRef","useEffect","savedSettings","localStorage","getItem","JSON","parse","setItem","stringify","requestNotificationPermission","handleChange","e","name","type","checked","target","prev","_objectSpread","_jsxs","className","children","_jsx","onChange","min","max","onClick","handleExportData","length","result","version","exportDate","Date","toISOString","data","jsonString","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","concat","slice","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","success","error","console","_result$error","disabled","triggerFileInput","current","ref","style","display","accept","async","file","files","Promise","resolve","reject","reader","FileReader","onload","event","importedData","isArray","metadata","parseError","onerror","readAsText","importData","importedHabits","mergeResult","mergeData","existingHabits","existingHabitsMap","habit","id","mergedHabits","importedHabit","index","findIndex","h","history","push","_mergeResult$error","window","location","reload","handleReset","confirm"],"sourceRoot":""}